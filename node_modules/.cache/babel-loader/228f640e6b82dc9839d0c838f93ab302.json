{"ast":null,"code":"import _asyncToGenerator from\"/home/kim/Documents/Programming/ARG/CLIENT/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"/home/kim/Documents/Programming/ARG/CLIENT/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/kim/Documents/Programming/ARG/CLIENT/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/home/kim/Documents/Programming/ARG/CLIENT/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/home/kim/Documents/Programming/ARG/CLIENT/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/home/kim/Documents/Programming/ARG/CLIENT/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import _regeneratorRuntime from\"/home/kim/Documents/Programming/ARG/CLIENT/node_modules/@babel/runtime/regenerator/index.js\";import React from\"react\";import\"./assets/css/chat.css\";import Loading from\"./components/Loading\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Chat=/*#__PURE__*/function(_React$Component){_inherits(Chat,_React$Component);var _super=_createSuper(Chat);function Chat(){var _localStorage$getItem;var _this;_classCallCheck(this,Chat);/*  document.querySelector(\"nav > a:first-child\").classList.remove(\"notification\"); */_this=_super.call(this);_this.state={oldMessages:null,newMessages:null,username:JSON.parse(localStorage.getItem(\"arg_user\"))[\"name\"],userID:JSON.parse(localStorage.getItem(\"arg_user\"))[\"id\"],index:0,place:(_localStorage$getItem=localStorage.getItem(\"arg_place\"))!==null&&_localStorage$getItem!==void 0?_localStorage$getItem:10,sendingMessage:false,tipIndex:parseInt(localStorage.getItem(\"arg_tipIndex\"))};_this.chatHandler=_this.chatHandler.bind(_assertThisInitialized(_this));return _this;}_createClass(Chat,[{key:\"componentDidMount\",value:function(){var _componentDidMount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _localStorage$getItem2;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(document.querySelector(\"#chatNav\"))document.querySelector(\"#chatNav\").classList.remove(\"notification\");(_localStorage$getItem2=localStorage.getItem(\"arg_tipIndex\"))!==null&&_localStorage$getItem2!==void 0?_localStorage$getItem2:localStorage.setItem(\"arg_tipIndex\",0);_context.next=4;return this.initializeMessages();case 4:this.scrollDown();case 5:case\"end\":return _context.stop();}}},_callee,this);}));function componentDidMount(){return _componentDidMount.apply(this,arguments);}return componentDidMount;}()/**\n     * Used to scroll down when new message arrives.\n     */},{key:\"componentDidUpdate\",value:function componentDidUpdate(){this.scrollDown();}/**\n       * Sets messages according to initial start, puzzle or chat.\n       * Triggers first message if npc writes, then scrolls down.\n       */},{key:\"initializeMessages\",value:function(){var _initializeMessages=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(\"inital messages\");this.setOldMessages();this.scrollDown();case 3:case\"end\":return _context2.stop();}}},_callee2,this);}));function initializeMessages(){return _initializeMessages.apply(this,arguments);}return initializeMessages;}()/**\n     * Fetches all chatmessages Player should has gotten so far\n     * @returns {array}\n     */},{key:\"setOldMessages\",value:function(){var _setOldMessages=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _this2=this;var messages,userID,request,response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:console.log(this.state.oldMessages);console.log(this.state.newMessages);if(!(!this.state.oldMessages&&this.state.index==0)){_context3.next=15;break;}userID=this.state.userID;request=new Request(\"https://dev.svnoak.net/api/dialog/chat/\".concat(userID));_context3.next=7;return fetch(request);case 7:response=_context3.sent;_context3.next=10;return response.json();case 10:messages=_context3.sent;console.log(\"fetching old messages\");this.setState({oldMessages:messages},function(){_this2.setNewMessages(_this2.state.oldMessages);console.log(\"Set old messages\");_this2.sendFirstMessage();});_context3.next=18;break;case 15:messages=this.state.oldMessages;console.log(\"Has already old messages\");this.setNewMessages(messages);case 18:case\"end\":return _context3.stop();}}},_callee3,this);}));function setOldMessages(){return _setOldMessages.apply(this,arguments);}return setOldMessages;}()/**\n     * Sets new messages accordingly if it's tips during a puzzle or a dialog after meeting a npc.\n     * @param {array} oldMessages - The fetched oldMessages to check  if there are any.\n     */},{key:\"setNewMessages\",value:function(){var _setNewMessages=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(oldMessages){var newMessages,localDialog,puzzleTips,puzzleMessages,index,oldPuzzles,newArr;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:console.log(oldMessages);// Both items are set by camera component after dialog or during puzzle.\n// Puzzlecomponent resets puzzletips, but chat component resets dialog.\nlocalDialog=JSON.parse(localStorage.getItem(\"arg_dialog\"));puzzleTips=JSON.parse(localStorage.getItem(\"arg_puzzleTips\"));console.log(puzzleTips);// Check if any dialog\nif(!(localDialog&&localDialog.length>0)){_context4.next=9;break;}console.log(\"local!\");newMessages=localDialog;// Check if any puzzle\n_context4.next=24;break;case 9:if(!(puzzleTips&&puzzleTips.length>0)){_context4.next=19;break;}console.log(\"PUZZLETIPS!\");puzzleMessages=this.createPuzzleMessages(puzzleTips);index=this.state.tipIndex;console.log(puzzleMessages);// Get amount of tips already used and render accordingly\nif(index>0){oldPuzzles=puzzleMessages.splice(0,index);if(this.state.oldMessages){newArr=this.state.oldMessages;oldPuzzles.forEach(function(puzzle){return newArr.push(puzzle);});this.setState({oldMessages:newArr});}}newMessages=puzzleMessages;console.log(newMessages);// Checks if any oldMessages are available\n_context4.next=24;break;case 19:if(!(oldMessages.length==0)){_context4.next=24;break;}console.log(\" Initial messages \");_context4.next=23;return this.fetchInitialMessages();case 23:newMessages=_context4.sent;case 24:console.log(newMessages);// Sets the state for all new Messages.\nthis.setState({newMessages:newMessages},this.sendFirstMessage(newMessages));case 26:case\"end\":return _context4.stop();}}},_callee4,this);}));function setNewMessages(_x){return _setNewMessages.apply(this,arguments);}return setNewMessages;}()/**\n     * Creates puzzle dialog objects for the chat.\n     * @param {array} messages - Array of Strings, each string one tip.\n     * @returns {array} - Array of objects in the same format as the other dialogs\n     */},{key:\"createPuzzleMessages\",value:function createPuzzleMessages(messages){var tipsArr=[];var userMessage={speaker:\"player\",text:\"Kan du hj√§lpa mig?\",tip:true};messages.forEach(function(message){var obj={speaker:\"anon\",text:message,delay:2000,tip:true};tipsArr.push(userMessage,obj);});return tipsArr;}/**\n     * Gets the inital messages, if player hasn't had any messages before.\n     * @returns {array} Array of objects with messages\n     */},{key:\"fetchInitialMessages\",value:function(){var _fetchInitialMessages=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var userID,request,response,json;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:userID=this.state.userID;request=new Request(\"https://dev.svnoak.net/api/dialog/initial/\".concat(userID));_context5.next=4;return fetch(request);case 4:response=_context5.sent;_context5.next=7;return response.json();case 7:json=_context5.sent;_context5.next=10;return json;case 10:return _context5.abrupt(\"return\",_context5.sent);case 11:case\"end\":return _context5.stop();}}},_callee5,this);}));function fetchInitialMessages(){return _fetchInitialMessages.apply(this,arguments);}return fetchInitialMessages;}()/**\n     * Renders all messages from oldMessages array.\n     * @returns {HTMLElement}\n     */},{key:\"renderList\",value:function renderList(){var _this3=this;var oldMessages=this.state.oldMessages;var list=/*#__PURE__*/_jsxs(\"div\",{className:\"messageList\",children:[oldMessages&&oldMessages.map(function(oldMessage,index){//if( oldMessages[index-1] && oldMessages[index-1].speaker == oldMessage.speaker ) oldMessage.speaker = \"\";\nreturn/*#__PURE__*/_jsx(Message,{sender:oldMessage.speaker,text:oldMessage.text,imageLink:oldMessage.imageLink,user:_this3.state.username,link:oldMessage.link},index);}),this.state.sendingMessage&&/*#__PURE__*/_jsx(Loading,{})]});return list;}/**\n     * Is used as clickevent Handler and sends responses to player.\n     * @param {string} sender - Only player triggers another message\n     */},{key:\"chatHandler\",value:function(){var _chatHandler=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(sender){var _this4=this;var index,newMessages,message,nextMessage,overNextMessage;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:index=this.state.index;newMessages=this.state.newMessages;message=newMessages[index];nextMessage=newMessages[index+1];overNextMessage=newMessages[index+2];console.log(message);if(!(sender==\"player\")){_context6.next=14;break;}this.sendMessage(message);document.querySelector(\".userInput\").value=\"\";if(!(nextMessage&&nextMessage.speaker==\"anon\")){_context6.next=14;break;}setTimeout(function(){return _this4.setState({sendingMessage:true});},1000);setTimeout(function(){return _this4.setState({sendingMessage:false});},nextMessage.delay);_context6.next=14;return this.sendMessage(nextMessage);case 14:case\"end\":return _context6.stop();}}},_callee6,this);}));function chatHandler(_x2){return _chatHandler.apply(this,arguments);}return chatHandler;}()/**\n     * Renders message in the list above the userInput\n     * @param {object} message - messageObject in the format delivered by the API\n     * @returns {bool}\n     */},{key:\"sendMessage\",value:function(){var _sendMessage=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(message){var _this5=this;var delay;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:console.log(\"Sending message\");console.log(message);message.delay?delay=message.delay:delay=0;setTimeout(function(){var newArr=_this5.state.oldMessages;console.log(newArr);newArr.push(message);console.log(newArr);_this5.setState({oldMessages:newArr,index:_this5.state.index+1});if(message.markDone){console.log(message.markDone);_this5.markDone(message.id);localStorage.setItem(\"arg_dialog\",\"[]\");}else if(message.tip){var index=_this5.state.tipIndex;_this5.setState({tipIndex:index+1});localStorage.setItem(\"arg_tipIndex\",index+1);}if(message.camera)document.querySelector(\"#cameraNav\").classList.add(\"notification\");if(message.reward)document.querySelector(\"#inventoryNav\").classList.add(\"notification\");},delay);case 4:case\"end\":return _context7.stop();}}},_callee7);}));function sendMessage(_x3){return _sendMessage.apply(this,arguments);}return sendMessage;}()/**\n     * Checks if first message is from npc and sends it to user\n     */},{key:\"sendFirstMessage\",value:function sendFirstMessage(messages){var index=this.state.index;var newMessages=messages;if(newMessages){console.log(newMessages);var firstMessage=newMessages[0];console.log(firstMessage);var oldMessages=this.state.oldMessages;if(firstMessage){console.log(\"FIRST MESSAGE\");if(index==0&&firstMessage.speaker==\"anon\"){console.log(\"SENDING FIRST MESSAGE\");this.sendMessage(firstMessage);}}}}/**\n     * Used to mark a dialog finished, will then come up as oldMessage in the future\n     * @param {int} dialogID - ID of dialog that was finished\n     */},{key:\"markDone\",value:function markDone(dialogID){var request=new Request(\"https://dev.svnoak.net/api/dialog/done\");var data={dialog:dialogID,user:this.state.userID,place:this.state.place,answer:\"\"};fetch(request,{method:'POST',headers:{'Accept':'application/json, text/plain, */*','Content-Type':'application/json'},body:JSON.stringify(data)}).then(function(response){return response.json();}).then(function(data){return console.log(data);});}/**\n     * Scrolls down to latest message\n     */},{key:\"scrollDown\",value:function scrollDown(){if(document.querySelector(\".messageList\")){document.querySelector(\".messageList\").scrollTop=document.querySelector(\".messageList\").scrollHeight;}}/**\n     * Checks if any messages need to be displayed in userInput.\n     * Renders Chat component.\n     * @returns {HTML Element}\n     */},{key:\"render\",value:function render(){var userInput;if(this.state.newMessages){var message=this.state.newMessages[this.state.index];if(message&&message.speaker==\"player\"){userInput=message.text;}}this.scrollDown();return/*#__PURE__*/_jsxs(\"div\",{id:\"chat\",children:[this.renderList(),/*#__PURE__*/_jsx(UserInput,{text:userInput,chatHandler:this.chatHandler})]});}}]);return Chat;}(React.Component);/**\n * userInput prefilled with value to be sent\n * @param {object} props - message Object \n * @returns {HTML Element}\n */function UserInput(props){;return/*#__PURE__*/_jsxs(\"div\",{className:\"userInputBox\",children:[/*#__PURE__*/_jsx(\"textarea\",{className:\"userInput\",disabled:true,value:props.text}),/*#__PURE__*/_jsx(\"div\",{className:\"sendButton\",onClick:function onClick(){return props.text?props.chatHandler(\"player\"):\"\";},children:\"SKICKA\"})]});}/**\n * Returns every individual message and puts appropriate images or classes depending on object.\n * @param {object} props - message Object \n * @returns {HTML Element}\n */function Message(props){return/*#__PURE__*/_jsxs(\"div\",{className:\"message \"+props.sender,children:[props.imageLink&&/*#__PURE__*/_jsx(\"img\",{src:\"https://dev.svnoak.net/assets/images/\"+props.imageLink}),/*#__PURE__*/_jsxs(\"div\",{className:\"messageText\",children:[props.text,\" \",props.link&&/*#__PURE__*/_jsx(\"a\",{href:\"https://dev.svnoak.net/assets/files/\"+props.link,download:true,target:\"_blank\",children:\"Om \\xC4lvor\"})]})]});}export default Chat;","map":{"version":3,"names":["React","Loading","Chat","state","oldMessages","newMessages","username","JSON","parse","localStorage","getItem","userID","index","place","sendingMessage","tipIndex","parseInt","chatHandler","bind","document","querySelector","classList","remove","setItem","initializeMessages","scrollDown","console","log","setOldMessages","request","Request","fetch","response","json","messages","setState","setNewMessages","sendFirstMessage","localDialog","puzzleTips","length","puzzleMessages","createPuzzleMessages","oldPuzzles","splice","newArr","forEach","puzzle","push","fetchInitialMessages","tipsArr","userMessage","speaker","text","tip","message","obj","delay","list","map","oldMessage","imageLink","link","sender","nextMessage","overNextMessage","sendMessage","value","setTimeout","markDone","id","camera","add","reward","firstMessage","dialogID","data","dialog","user","answer","method","headers","body","stringify","then","scrollTop","scrollHeight","userInput","renderList","Component","UserInput","props","Message"],"sources":["/home/kim/Documents/Programming/ARG/CLIENT/src/chat.js"],"sourcesContent":["import React from \"react\";\nimport \"./assets/css/chat.css\";\nimport Loading from \"./components/Loading\";\n\nclass Chat extends React.Component {\n    constructor(){\n       /*  document.querySelector(\"nav > a:first-child\").classList.remove(\"notification\"); */\n        super()\n        this.state = {\n            oldMessages: null,\n            newMessages: null,\n            username: JSON.parse(localStorage.getItem(\"arg_user\"))[\"name\"],\n            userID: JSON.parse(localStorage.getItem(\"arg_user\"))[\"id\"],\n            index: 0,\n            place: localStorage.getItem(\"arg_place\") ?? 10,\n            sendingMessage: false,\n            tipIndex: parseInt(localStorage.getItem(\"arg_tipIndex\"))\n        }\n        this.chatHandler = this.chatHandler.bind(this);\n    }\n\n    async componentDidMount(){\n        if( document.querySelector(\"#chatNav\") ) document.querySelector(\"#chatNav\").classList.remove(\"notification\");\n        localStorage.getItem(\"arg_tipIndex\") ?? localStorage.setItem(\"arg_tipIndex\", 0);\n        await this.initializeMessages();\n        this.scrollDown()\n    }\n\n    /**\n     * Used to scroll down when new message arrives.\n     */\n    componentDidUpdate() {\n        this.scrollDown();\n      }\n\n      /**\n       * Sets messages according to initial start, puzzle or chat.\n       * Triggers first message if npc writes, then scrolls down.\n       */\n    async initializeMessages(){\n        console.log(\"inital messages\");\n        this.setOldMessages();\n        this.scrollDown();\n    }\n\n\n\n    /**\n     * Fetches all chatmessages Player should has gotten so far\n     * @returns {array}\n     */\n    async setOldMessages(){\n        let messages;\n        console.log(this.state.oldMessages);\n        console.log(this.state.newMessages);\n        if( !this.state.oldMessages && this.state.index == 0 ){\n            const userID = this.state.userID;\n            const request = new Request(`https://dev.svnoak.net/api/dialog/chat/${userID}`);\n    \n            const response = await fetch(request);\n            messages = await response.json();\n            console.log(\"fetching old messages\");\n            this.setState({oldMessages: messages}, () => {\n                this.setNewMessages(this.state.oldMessages)\n                console.log(\"Set old messages\");\n                this.sendFirstMessage();\n            });\n        } else {\n            messages = this.state.oldMessages;\n            console.log(\"Has already old messages\");\n            this.setNewMessages(messages);\n        }\n        \n    }\n\n    /**\n     * Sets new messages accordingly if it's tips during a puzzle or a dialog after meeting a npc.\n     * @param {array} oldMessages - The fetched oldMessages to check  if there are any.\n     */\n    async setNewMessages(oldMessages){\n        console.log(oldMessages);\n        let newMessages;\n        // Both items are set by camera component after dialog or during puzzle.\n        // Puzzlecomponent resets puzzletips, but chat component resets dialog.\n        let localDialog = JSON.parse(localStorage.getItem(\"arg_dialog\"));\n        let puzzleTips = JSON.parse(localStorage.getItem(\"arg_puzzleTips\"));\n        console.log(puzzleTips);\n\n        // Check if any dialog\n        if( localDialog && localDialog.length > 0){\n            console.log(\"local!\");\n            newMessages = localDialog;\n\n        // Check if any puzzle\n        } else if( puzzleTips && puzzleTips.length > 0 ){\n            console.log(\"PUZZLETIPS!\");\n            let puzzleMessages = this.createPuzzleMessages(puzzleTips);\n            let index = this.state.tipIndex;\n            console.log(puzzleMessages);\n\n            // Get amount of tips already used and render accordingly\n            if( index > 0 ){\n                let oldPuzzles = puzzleMessages.splice(0, index);\n                if( this.state.oldMessages ){\n                    let newArr = this.state.oldMessages;\n                    oldPuzzles.forEach( puzzle => newArr.push(puzzle) );\n                    this.setState({oldMessages: newArr});\n                }\n            }\n            newMessages = puzzleMessages;\n            console.log(newMessages);\n\n            // Checks if any oldMessages are available\n        } else if( oldMessages.length == 0) {\n            console.log(\" Initial messages \");\n            newMessages = await this.fetchInitialMessages();\n        }\n\n        console.log(newMessages);\n        // Sets the state for all new Messages.\n        this.setState({newMessages: newMessages}, this.sendFirstMessage(newMessages));\n    }\n\n    /**\n     * Creates puzzle dialog objects for the chat.\n     * @param {array} messages - Array of Strings, each string one tip.\n     * @returns {array} - Array of objects in the same format as the other dialogs\n     */\n    createPuzzleMessages(messages){\n        let tipsArr = [];\n        let userMessage = {\n            speaker: \"player\",\n            text: \"Kan du hj√§lpa mig?\",\n            tip: true\n        }\n        messages.forEach(message => {\n            let obj = {\n                speaker: \"anon\",\n                text: message,\n                delay: 2000,\n                tip: true\n            }\n            tipsArr.push(userMessage, obj);\n        });\n        return tipsArr;\n    }\n\n    /**\n     * Gets the inital messages, if player hasn't had any messages before.\n     * @returns {array} Array of objects with messages\n     */\n    async fetchInitialMessages(){\n        const userID = this.state.userID;\n        const request = new Request(`https://dev.svnoak.net/api/dialog/initial/${userID}`);\n        const response = await fetch(request);\n        const json = await response.json();\n        return await json;\n    }\n\n    /**\n     * Renders all messages from oldMessages array.\n     * @returns {HTMLElement}\n     */\n    renderList(){\n        let oldMessages = this.state.oldMessages;\n        let list = (\n        <div className=\"messageList\">\n        { \n            oldMessages && oldMessages.map( (oldMessage, index) => {\n                //if( oldMessages[index-1] && oldMessages[index-1].speaker == oldMessage.speaker ) oldMessage.speaker = \"\";\n                return (\n                <Message\n                key={index}\n                sender={oldMessage.speaker}\n                text={oldMessage.text}\n                imageLink={oldMessage.imageLink}\n                user={this.state.username}\n                link={oldMessage.link}\n                />\n                )\n            })\n        }\n        { this.state.sendingMessage && <Loading /> }\n        </div>\n        )\n\n        return list;\n    }\n\n    /**\n     * Is used as clickevent Handler and sends responses to player.\n     * @param {string} sender - Only player triggers another message\n     */\n    async chatHandler(sender){\n        const index = this.state.index;\n        const newMessages = this.state.newMessages;\n        const message = newMessages[index];\n        const nextMessage = newMessages[index+1];\n        const overNextMessage = newMessages[index+2];\n\n        console.log(message);\n        if( sender == \"player\" ){\n            this.sendMessage(message);\n            document.querySelector(\".userInput\").value = \"\";\n            if( nextMessage && nextMessage.speaker == \"anon\"){\n                setTimeout( () => this.setState({sendingMessage: true}), 1000 );\n                setTimeout( () => this.setState({sendingMessage: false}), nextMessage.delay);\n                await this.sendMessage(nextMessage);\n\n/*                 if( overNextMessage && overNextMessage.speaker == \"anon\" ){\n                    setTimeout( () => this.setState({sendingMessage: true}), 1000 );\n                    setTimeout( () => this.setState({sendingMessage: false}), overNextMessage.delay);\n                    this.sendMessage(overNextMessage);\n                } */\n            }\n        }\n    }\n\n    /**\n     * Renders message in the list above the userInput\n     * @param {object} message - messageObject in the format delivered by the API\n     * @returns {bool}\n     */\n     async sendMessage(message){\n        console.log(\"Sending message\");\n        console.log(message);\n        let delay;\n        message.delay ? delay = message.delay : delay = 0;\n        setTimeout(() => {\n            let newArr = this.state.oldMessages;\n            console.log(newArr);\n            newArr.push(message);\n            console.log(newArr);\n            this.setState({\n                oldMessages: newArr,\n                index: this.state.index + 1\n            })\n            if( message.markDone ) {\n                console.log(message.markDone);\n                this.markDone(message.id);\n                localStorage.setItem(\"arg_dialog\", \"[]\");\n            } else if( message.tip ){\n                let index = this.state.tipIndex;\n                this.setState({tipIndex: index + 1});\n                localStorage.setItem(\"arg_tipIndex\", index + 1);\n            }\n            if( message.camera ) document.querySelector(\"#cameraNav\").classList.add(\"notification\");\n            if( message.reward ) document.querySelector(\"#inventoryNav\").classList.add(\"notification\");\n            }, delay);\n    }\n\n    /**\n     * Checks if first message is from npc and sends it to user\n     */\n     sendFirstMessage(messages){\n        const index = this.state.index;\n        const newMessages = messages;\n        if( newMessages ){\n            console.log(newMessages);\n            const firstMessage = newMessages[0];\n            console.log(firstMessage);\n            const oldMessages = this.state.oldMessages;\n            if( firstMessage ){\n                console.log(\"FIRST MESSAGE\");\n                if( index == 0 && firstMessage.speaker == \"anon\" ){\n                    console.log(\"SENDING FIRST MESSAGE\");\n                    this.sendMessage(firstMessage);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Used to mark a dialog finished, will then come up as oldMessage in the future\n     * @param {int} dialogID - ID of dialog that was finished\n     */\n    markDone(dialogID){\n        const request = new Request(`https://dev.svnoak.net/api/dialog/done`);\n        const data = {\n            dialog: dialogID,\n            user: this.state.userID,\n            place: this.state.place,\n            answer: \"\"\n        }\n\n        fetch(request ,{\n            method: 'POST',\n            headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        .then( response => response.json() )\n        .then( data => console.log(data) );\n    }\n\n    /**\n     * Scrolls down to latest message\n     */\n    scrollDown(){\n        if( document.querySelector(\".messageList\") ){\n            document.querySelector(\".messageList\").scrollTop = document.querySelector(\".messageList\").scrollHeight;\n        }\n    }\n\n    /**\n     * Checks if any messages need to be displayed in userInput.\n     * Renders Chat component.\n     * @returns {HTML Element}\n     */\n    render(){\n        let userInput;\n        if( this.state.newMessages ){\n            const message = this.state.newMessages[this.state.index];\n            if( message && message.speaker == \"player\" ){\n                userInput = message.text;\n            }\n        }\n        this.scrollDown();\n        return (\n            <div id=\"chat\">\n            { this.renderList() }\n            <UserInput \n            text={userInput}\n            chatHandler={this.chatHandler}\n                />\n                </div>\n         );\n    }\n}\n\n/**\n * userInput prefilled with value to be sent\n * @param {object} props - message Object \n * @returns {HTML Element}\n */\nfunction UserInput(props){;\n    return(\n        <div className=\"userInputBox\">\n            <textarea className=\"userInput\" disabled value={props.text}></textarea>\n            <div className=\"sendButton\" onClick={() => props.text ? props.chatHandler(\"player\") : \"\"}>SKICKA</div>\n        </div>\n    )\n    \n}\n\n/**\n * Returns every individual message and puts appropriate images or classes depending on object.\n * @param {object} props - message Object \n * @returns {HTML Element}\n */\nfunction Message(props){\n    return(\n        <div className={\"message \" + props.sender}>\n            { props.imageLink && <img src={\"https://dev.svnoak.net/assets/images/\" + props.imageLink}></img> }\n            <div className=\"messageText\">\n                { props.text } {props.link && <a href={\"https://dev.svnoak.net/assets/files/\" + props.link} download target=\"_blank\">Om √Ñlvor</a>}\n            </div>\n        </div>\n    )\n}\n\n \nexport default Chat;"],"mappings":"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"},"metadata":{},"sourceType":"module"}